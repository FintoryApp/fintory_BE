name: Fintory CI/CD

on:
  push:
    branches: [ "dev" ]

env:
  AWS_REGION: ap-northeast-2

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      app-child: ${{ steps.filter.outputs.app-child }}
      app-parent: ${{ steps.filter.outputs.app-parent }}
      shared: ${{ steps.filter.outputs.shared }}

    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            app-child:
              - 'app-child/**'
            app-parent:
              - 'app-parent/**'
            shared:
              - 'auth/**'
              - 'domain/**'
              - 'common/**'
              - 'infra/**'
              - 'build.gradle'
              - 'settings.gradle'
              - 'gradle/**'

  build-and-deploy-child:
    needs: changes
    if: needs.changes.outputs.app-child == 'true' || needs.changes.outputs.shared == 'true'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - run: chmod +x ./gradlew

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push app-child
        run: |
          ./gradlew :app-child:clean :app-child:build
          docker build -t app-child:latest ./app-child
          docker tag app-child:latest ${{ steps.login-ecr.outputs.registry }}/app-child:latest
          docker push ${{ steps.login-ecr.outputs.registry }}/app-child:latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.FINTORY_CHILD_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            aws ecr get-login-password --region ap-northeast-2 | \
              docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}

            docker stop app-child || true
            docker rm app-child || true
            docker pull ${{ steps.login-ecr.outputs.registry }}/app-child:latest

            docker run -d \
              --name app-child \
              -p 8080:8080 \
              -e SPRING_PROFILES_ACTIVE=deploy \
              -e DB_URL=${{ secrets.RDS_URL }} \
              -e DB_USERNAME=${{ secrets.RDS_USERNAME }} \
              -e DB_PASSWORD=${{ secrets.RDS_PASSWORD }} \
              -e JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
              -e ACCESS_TOKEN_EXPIRATION_MINUTES=${{ secrets.ACCESS_TOKEN_EXPIRATION_MINUTES }} \
              -e REFRESH_TOKEN_EXPIRATION_DAYS=${{ secrets.REFRESH_TOKEN_EXPIRATION_DAYS }} \
              -e GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} \
              -e KAKAO_REST_CLIENT_ID=${{ secrets.KAKAO_REST_CLIENT_ID }} \
              -e KAKAO_REDIRECT_URI=${{ secrets.KAKAO_REDIRECT_URI }} \
              -e REDIS_HOST=${{ secrets.AWS_REDIS_HOST }} \
              ${{ steps.login-ecr.outputs.registry }}/app-child:latest

            docker image prune -f

